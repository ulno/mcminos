buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

//    dependencies { // TODO: check, seems not to be necessary here anymore (still in main gradle)
//        classpath 'io.fabric.tools:gradle:1.+'
//    }
}

android {
    apply from: "../flavorConfig.gradle"
//    ext.applicationID = fcApplicationId

    buildToolsVersion '25.0.0'
    compileSdkVersion 25
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            jniLibs.srcDirs = ['libs']
            assets.srcDirs = ['assets']
        }

        instrumentTest.setRoot('tests')
    }

    buildTypes {
        release {
            minifyEnabled true
/*            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro' */
            proguardFiles 'proguard-android.txt'
        }
        debug {
            resValue "string", "app_name", fcApplicationName
            applicationIdSuffix ".debug"
        }
    }

    productFlavors {
        // one flavor needed to apply applicationId
        always {
            resValue "string", "app_name", fcApplicationName
            applicationId = fcApplicationId
            versionCode = fcVersionCode
            versionName = version
        }
    }

    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }

    apply plugin: 'com.android.application'
    apply plugin: 'io.fabric'

    dependencies {
        // Crashlytics Kit
        compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
            transitive = true
        }
        // Twitter Kit
 //       compile('com.twitter.sdk.android:twitter:1.12.0@aar') {
 //           transitive = true
 //       }
        // Digits Kit
//        compile('com.digits.sdk.android: digits: 1.9.3@aar') {
//            transitive = true
//        }
        // MoPub Kit
//        compile('com.mopub.sdk.android:mopub:4.3.0@aar') {
//            transitive = true
//        }
    }
}


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() { 
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.mcminos.game.android/com.mcminos.game.android.AndroidLauncher'
}

// sets up the Android Eclipse project, using the old Ant based build.
eclipse {
    // need to specify Java source sets explicitly, SpringSource Gradle Eclipse plugin
    // ignores any nodes added in classpath.file.withXml
    sourceSets {
        main {
            java.srcDirs "src", 'gen'
        }
    }

    jdt {
        sourceCompatibility = 1.7
        targetCompatibility = 1.7
    }

    classpath {
        plusConfigurations += [ project.configurations.compile ]        
        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'       
    }

    project {
        name = appName + "-android"
        natures 'com.android.ide.eclipse.adt.AndroidNature'
        buildCommands.clear();
        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
        buildCommand "org.eclipse.jdt.core.javabuilder"
        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
    }
}

// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src");
        scopes = [ COMPILE: [plus:[project.configurations.compile]]]        

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance();
                builder.current = node;
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value:"true")
                        }
                    }
                }
            }
        }
    }
}



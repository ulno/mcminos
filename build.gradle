buildscript {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
//        jcenter()
        maven { url "https://repo.eclipse.org/content/repositories/paho-releases/" } // for mqtt
        //maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'org.wisepersist:gwt-gradle-plugin:1.1.11'
        classpath 'com.android.tools.build:gradle:4.1.0'
        //classpath 'org.robovm:robovm-gradle-plugin:1.13.0'
        classpath 'com.badlogicgames.gdx:gdx-tools:1.9.14'
        // for git version information
        //classpath 'org.ajoberstar:grgit:1.1.0'
        //classpath 'io.fabric.tools:gradle:1.+'

    }
}

apply from: "flavorConfig.gradle"

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"


    ext {
        // Open the Git repository in the current directory.
        //git = org.ajoberstar.grgit.Grgit.open('.')
    }
    // Use abbreviatedId commit id in the version.
    //version = "0.0.1.${git.head().abbreviatedId}"
    version = "1.1"
    ext {
        //appName = 'mcminos-mobile'
        appName = fcApplicationName
        app_name = appName
        //appName = app_name
        gdxVersion = '1.9.1'
        //roboVMVersion = '1.13.0'
        box2DLightsVersion = '1.4'
        ashleyVersion = '1.6.0'
        aiVersion = '1.5.0'
        applicationID = fcApplicationId

        // Get commit id of HEAD.
        //revision = git.head().id
        revision = "live" // TODO: check how this works
        // Alternative is using abbreviatedId of head() method.
        // revision = git.head().abbreviatedId
    }

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }

}

project(":desktop") {
    apply plugin: "java"


    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        //compile "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-desktop:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-platform:$gdxVersion:natives-desktop"
    }
}

project(":android") {
    apply plugin: "android"

    configurations { natives }

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-android:$gdxVersion"
        compile "com.esotericsoftware:kryo:3.0.3"
    }
}

project(":ios") {
    apply plugin: "java"
//    apply plugin: "robovm"


    dependencies {
        compile project(":core")
//        compile "org.robovm:robovm-rt:$roboVMVersion"
//        compile "org.robovm:robovm-cocoatouch:$roboVMVersion"
//        compile "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-ios"
    }
}

project(":html") {
    apply plugin: "gwt"
    apply plugin: "war"


    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-box2d-gwt:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-controllers-gwt:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-gwt:$gdxVersion:sources"
    }
}


project(":core") {
    apply plugin: "java"


    dependencies {
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
        compile "com.esotericsoftware:kryo:3.0.3"
        compile "org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2" // for mqtt
        compile "org.yaml:snakeyaml:1.17" // snakeyaml in sonatype
    }
}

tasks.eclipse.doLast {
    delete ".project"
}

writeVersionFile()

def writeVersionFile () {
    // TODO: also check if flavor needs to be run
/* TODO: there is probably a better way to do this in gradle
    new File("VERSION").text = "buildDate: " + new Date() \
            + "\nrevision: " + revision \
            + "\nversion: " + project.version \
            + "\napplicationName: " + appName */
    exec {
        executable "tools/set_version.sh"
        args revision, project.version, appName
    }
}

task printFlavor() {
    apply from: "flavorConfig.gradle"

    doLast {
        println "name: " + appName
        println "applicationId: " + applicationId
        println "assetDir: " + assetDir
    }
}
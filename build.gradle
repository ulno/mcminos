buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        google()
        maven { url "https://repo.eclipse.org/content/repositories/paho-releases/" } // for mqtt
    }
    dependencies {
        classpath 'org.wisepersist:gwt-gradle-plugin:1.0.13'
        classpath 'org.gretty:gretty:3.0.2'
        classpath 'com.android.tools.build:gradle:4.1.3'
        classpath 'com.mobidevelop.robovm:robovm-gradle-plugin:2.3.12'
        // TODO: how to get that from the later definition - gradle magic
        classpath "com.badlogicgames.gdx:gdx-tools:1.9.14"
        // for git version information
        //classpath 'org.ajoberstar:grgit:1.1.0'
    }
}

// apply from: "flavorConfig.gradle"

allprojects {

    apply plugin: "eclipse"
//    apply plugin: "idea" not nexessary anymore in new version?

    ext {
    	version = '1.1'
        appName = "mcminos-mobile"
//        appName = fcApplicationName
//        app_name = appName
        //appName = app_name
//        applicationID = fcApplicationId

        // Get commit id of HEAD.
        //revision = git.head().id
        revision = "live" // TODO: check how this works
        // Alternative is using abbreviatedId of head() method.
        // revision = git.head().abbreviatedId

        // Open the Git repository in the current directory.
        //git = org.ajoberstar.grgit.Grgit.open('.')
	    // Use abbreviatedId commit id in the version.
    	//version = "0.0.1.${git.head().abbreviatedId}"
        gdxVersion = '1.9.14'
        roboVMVersion = '2.3.12'
        box2DLightsVersion = '1.5'
        ashleyVersion = '1.7.3'
        aiVersion = '1.8.2'
        gdxControllersVersion = '2.1.0'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}


project(":desktop") {
    apply plugin: "java-library"


    dependencies {
        implementation project(":core")
        api "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        api "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        api "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
        api "com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdxControllersVersion"

    }

}

project(":android") {
    apply plugin: "com.android.application"

    configurations { natives }

    dependencies {
        implementation project(":core")
        api "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
        api "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-arm64-v8a"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86_64"
        api "com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdxControllersVersion"

    }
}

project(":ios") {
    apply plugin: "java-library"
    apply plugin: "robovm"


    dependencies {
        implementation project(":core")
        api "com.mobidevelop.robovm:robovm-rt:$roboVMVersion"
        api "com.mobidevelop.robovm:robovm-cocoatouch:$roboVMVersion"
        api "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"
        api "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-ios"
        api "com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdxControllersVersion"

    }
}

project(":html") {
    apply plugin: "java-library"
    apply plugin: "gwt"
    apply plugin: "war"
    apply plugin: "org.gretty"


    dependencies {
        implementation project(":core")
        api "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
        api "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
        api "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
        api "com.badlogicgames.gdx:gdx-box2d:$gdxVersion:sources"
        api "com.badlogicgames.gdx:gdx-box2d-gwt:$gdxVersion:sources"
        api "com.badlogicgames.gdx-controllers:gdx-controllers-core:$gdxControllersVersion:sources"
        api "com.badlogicgames.gdx-controllers:gdx-controllers-gwt:$gdxControllersVersion"
        api "com.badlogicgames.gdx-controllers:gdx-controllers-gwt:$gdxControllersVersion:sources"

    }
}


project(":core") {
    apply plugin: "java-library"

    dependencies {
//        implementation project(":core") <- circular dependency?
        api "com.badlogicgames.gdx:gdx:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        api "com.badlogicgames.gdx-controllers:gdx-controllers-core:$gdxControllersVersion"
//        api "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
//        api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
//        api "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
//        api "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
        api "com.esotericsoftware:kryo:3.0.3"
        api "org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2" // for mqtt
        api "org.yaml:snakeyaml:1.17" // snakeyaml in sonatype
    }
}

tasks.eclipse.doLast {
    delete ".project"
}

writeVersionFile()

def writeVersionFile () {
    // TODO: also check if flavor needs to be run
/* TODO: there is probably a better way to do this in gradle
    new File("VERSION").text = "buildDate: " + new Date() \
            + "\nrevision: " + revision \
            + "\nversion: " + project.version \
            + "\napplicationName: " + appName */
    exec {
        executable "tools/set_version.sh"
        args revision, project.version, appName
    }
}

task printFlavor() {
    apply from: "flavorConfig.gradle"

    doLast {
        println "name: " + appName
        println "applicationId: " + applicationId
        println "assetDir: " + assetDir
    }
}
